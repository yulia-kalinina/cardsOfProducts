import {
  copyFileSync,
  readdirSync,
  statSync,
  readFileSync,
  writeFileSync,
  mkdirSync,
} from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ES Modules
const __dirname = dirname(fileURLToPath(import.meta.url));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const config = {
  repoName: "cardsOfProducts", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  outDir: join(__dirname, "out"),
  staticRoutes: ["/", "/products", "/products/add", "/404"],
  dynamicRoutes: ["/products/[slug]"],
};

// 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
const createRedirects = () => {
  try {
    // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º trailing slash
    config.staticRoutes.forEach((route) => {
      if (route.endsWith("/")) return;

      const htmlPath = join(config.outDir, `${route}.html`);
      const redirectContent = `<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="refresh" content="0; url=${route}/">
  <link rel="canonical" href="${route}/" />
</head>
<body>
  Redirecting to <a href="${route}/">${route}/</a>...
</body>
</html>`;

      writeFileSync(htmlPath, redirectContent);
    });
    console.log("‚úÖ Static redirects created");
  } catch (err) {
    console.error("‚ùå Error creating static redirects:", err);
  }
};

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
const handleDynamicRoutes = () => {
  try {
    config.dynamicRoutes.forEach((route) => {
      const dirPath = join(config.outDir, route.replace("[slug]", "_"));
      mkdirSync(dirPath, { recursive: true });

      const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <script>
    const slug = window.location.pathname.split('/').pop();
    window.location.href = '/404.html?slug=' + encodeURIComponent(slug);
  </script>
</head>
<body>
  Redirecting...
</body>
</html>`;

      writeFileSync(join(dirPath, "index.html"), htmlContent);
    });
    console.log("‚úÖ Dynamic routes handled");
  } catch (err) {
    console.error("‚ùå Error handling dynamic routes:", err);
  }
};

// 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤
const updateAssetPaths = () => {
  try {
    const processDirectory = (dir) => {
      const files = readdirSync(dir);

      files.forEach((file) => {
        const fullPath = join(dir, file);
        const stat = statSync(fullPath);

        if (stat.isDirectory()) {
          processDirectory(fullPath);
        } else if (
          file.endsWith(".js") ||
          file.endsWith(".html") ||
          file.endsWith(".json")
        ) {
          try {
            let content = readFileSync(fullPath, "utf8");
            content = content.replace(/\/_next/g, `/${config.repoName}/_next`);
            writeFileSync(fullPath, content);
          } catch (err) {
            console.error(`Error processing ${file}:`, err);
          }
        }
      });
    };

    const nextStaticDir = join(config.outDir, "_next");
    if (statSync(nextStaticDir).isDirectory()) {
      processDirectory(nextStaticDir);
      console.log("‚úÖ Asset paths updated");
    }
  } catch (err) {
    console.error("‚ùå Error updating asset paths:", err);
  }
};

// 4. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  try {
    console.log("üöÄ Starting predeploy tasks...");

    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
    createRedirects();

    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    handleDynamicRoutes();

    // 3. –ö–æ–ø–∏—Ä—É–µ–º 404.html
    copyFileSync(
      join(config.outDir, "404.html"),
      join(config.outDir, "index.html")
    );
    console.log("‚úÖ 404.html copied to index.html");

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    updateAssetPaths();

    console.log("üéâ All predeploy tasks completed successfully!");
  } catch (err) {
    console.error("‚ùå Predeploy failed:", err);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
